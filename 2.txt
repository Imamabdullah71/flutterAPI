import 'package:bootstrap_icons/bootstrap_icons.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:kasirsql/controllers/barang_controller/barang_controller.dart';
import 'package:kasirsql/controllers/transaksi_controller/transaksi_controller.dart';

class TransaksiPage extends StatelessWidget {
  TransaksiPage({super.key});
  final BarangController barangController = Get.find<BarangController>();
  final TransaksiController transaksiController =
      Get.find<TransaksiController>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        title: const Text(
          "Transaksi",
          style: TextStyle(color: Colors.white, fontSize: 22, fontWeight: FontWeight.bold),
        ),
        centerTitle: true,
        backgroundColor: const Color.fromARGB(255, 114, 94, 225),
        elevation: 0,
      ),
      body: Obx(() {
        if (barangController.barangList.isEmpty) {
          return const Center(
            child: Text(
              'Tidak ada data barang',
              style: TextStyle(fontSize: 18, color: Colors.grey),
            ),
          );
        }
        return ListView.builder(
          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
          itemCount: barangController.barangList.length,
          itemBuilder: (context, index) {
            final barang = barangController.barangList[index];
            return Obx(() {
              var detailBarang =
                  transaksiController.selectedBarangList.firstWhere(
                (element) => element['id'] == barang.id,
                orElse: () => {'jumlah_barang': 0},
              );

              return Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15.0),
                ),
                elevation: 3,
                margin: const EdgeInsets.symmetric(vertical: 8.0),
                child: ListTile(
                  leading: barang.gambar != null && barang.gambar!.isNotEmpty
                      ? ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: Image.network(
                            'http://10.10.10.129/flutterapi/uploads/${barang.gambar}',
                            width: 55,
                            height: 55,
                            fit: BoxFit.cover,
                          ),
                        )
                      : const Icon(
                          Icons.image_not_supported,
                          size: 50,
                          color: Colors.grey,
                        ),
                  title: Text(
                    barang.namaBarang,
                    style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                  ),
                  subtitle: Text(
                    barang.kodeBarang.toString(),
                    style: const TextStyle(fontSize: 14, color: Colors.grey),
                  ),
                  trailing: Text(
                    "X${detailBarang['jumlah_barang'] ?? 0}",
                    style: const TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
                  ),
                  onTap: () {
                    transaksiController.addBarangToCart(barang);
                  },
                ),
              );
            });
          },
        );
      }),
      floatingActionButton: Padding(
        padding: const EdgeInsets.only(left: 30),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color.fromARGB(255, 114, 94, 225),
            minimumSize: const Size(
              double.infinity, // Lebar
              48, // Tinggi
            ),
            padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 20),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(30.0),
            ),
          ),
          onPressed: () {
            Get.toNamed("/cart_page");
          },
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Icon(
                BootstrapIcons.cart3,
                color: Colors.white,
              ),
              Obx(() {
                return Text(
                  " (${transaksiController.totalBarang.value})",
                  style: const TextStyle(color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold),
                );
              }),
            ],
          ),
        ),
      ),
      backgroundColor: Colors.grey[100],
    );
  }
}


import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:kasirsql/controllers/transaksi_controller/transaksi_controller.dart';
import 'package:kasirsql/models/barang_model.dart';

class CartPage extends StatelessWidget {
  CartPage({super.key});
  final TransaksiController transaksiController = Get.find<TransaksiController>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        title: Obx(() => Text(
          'Total Harga: ${transaksiController.formatRupiah(transaksiController.totalHarga.value)}',
          style: const TextStyle(fontSize: 20, color: Colors.white, fontWeight: FontWeight.bold),
        )),
        centerTitle: true,
        backgroundColor: const Color.fromARGB(255, 114, 94, 225),
        elevation: 0,
      ),
      body: Obx(() {
        if (transaksiController.selectedBarangList.isEmpty) {
          return const Center(
            child: Text(
              'Keranjang kosong',
              style: TextStyle(fontSize: 18, color: Colors.grey),
            ),
          );
        }
        return Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Text(
                'Total Barang: ${transaksiController.totalBarang.value}',
                style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
              ),
            ),
            Expanded(
              child: ListView.builder(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                itemCount: transaksiController.selectedBarangList.length,
                itemBuilder: (context, index) {
                  final detailBarang = transaksiController.selectedBarangList[index];
                  return Card(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(15.0),
                    ),
                    elevation: 3,
                    margin: const EdgeInsets.symmetric(vertical: 8.0),
                    child: ListTile(
                      leading: detailBarang['gambar'] != null && detailBarang['gambar'].isNotEmpty
                          ? ClipRRect(
                              borderRadius: BorderRadius.circular(8),
                              child: Image.network(
                                'http://10.10.10.129/flutterapi/uploads/${detailBarang['gambar']}',
                                fit: BoxFit.cover,
                                width: 50,
                                height: 50,
                              ),
                            )
                          : const Icon(Icons.broken_image),
                      title: Text(
                        detailBarang['nama_barang'],
                        style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                      ),
                      subtitle: Text(
                        '${transaksiController.formatRupiah(detailBarang['harga_barang'])} x ${detailBarang['jumlah_barang']} = ${transaksiController.formatRupiah(detailBarang['jumlah_harga'])}',
                        style: const TextStyle(fontSize: 14, color: Colors.grey),
                      ),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                            icon: const Icon(Icons.remove),
                            onPressed: () {
                              if (detailBarang['jumlah_barang'] > 1) {
                                transaksiController.updateBarangQuantity(
                                  Barang(
                                    id: detailBarang['id'],
                                    namaBarang: detailBarang['nama_barang'],
                                    hargaJual: detailBarang['harga_barang'],
                                    kodeBarang: detailBarang['kode_barang'],
                                    stokBarang: detailBarang['stok_barang'],
                                    kategoriId: detailBarang['kategori_id'],
                                    namaKategori: detailBarang['nama_kategori'],
                                    hargaBeli: detailBarang['harga_beli'],
                                    createdAt: DateTime.now(),
                                    updatedAt: DateTime.now(),
                                    gambar: detailBarang['gambar'],
                                  ),
                                  detailBarang['jumlah_barang'] - 1,
                                );
                              } else {
                                transaksiController.removeBarangFromCart(
                                  Barang(
                                    id: detailBarang['id'],
                                    namaBarang: detailBarang['nama_barang'],
                                    hargaJual: detailBarang['harga_barang'],
                                    kodeBarang: detailBarang['kode_barang'],
                                    stokBarang: detailBarang['stok_barang'],
                                    kategoriId: detailBarang['kategori_id'],
                                    namaKategori: detailBarang['nama_kategori'],
                                    hargaBeli: detailBarang['harga_beli'],
                                    createdAt: DateTime.now(),
                                    updatedAt: DateTime.now(),
                                    gambar: detailBarang['gambar'],
                                  ),
                                );
                              }
                            },
                          ),
                          Text(
                            detailBarang['jumlah_barang'].toString(),
                            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                          ),
                          IconButton(
                            icon: const Icon(Icons.add),
                            onPressed: () {
                              if (detailBarang['jumlah_barang'] < detailBarang['stok_barang']) {
                                transaksiController.updateBarangQuantity(
                                  Barang(
                                    id: detailBarang['id'],
                                    namaBarang: detailBarang['nama_barang'],
                                    hargaJual: detailBarang['harga_barang'],
                                    kodeBarang: detailBarang['kode_barang'],
                                    stokBarang: detailBarang['stok_barang'],
                                    kategoriId: detailBarang['kategori_id'],
                                    namaKategori: detailBarang['nama_kategori'],
                                    hargaBeli: detailBarang['harga_beli'],
                                    createdAt: DateTime.now(),
                                    updatedAt: DateTime.now(),
                                    gambar: detailBarang['gambar'],
                                  ),
                                  detailBarang['jumlah_barang'] + 1,
                                );
                              } else {
                                Get.snackbar(
                                  'Stok Tidak Cukup',
                                  'Tidak bisa melebihi stok barang.',
                                  backgroundColor: const Color.fromARGB(255, 235, 218, 63),
                                  colorText: Colors.black,
                                  borderRadius: 10,
                                  margin: const EdgeInsets.all(10),
                                  snackPosition: SnackPosition.TOP,
                                  icon: const Icon(Icons.error, color: Colors.black),
                                  duration: const Duration(seconds: 3),
                                  snackStyle: SnackStyle.FLOATING,
                                  boxShadows: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.2),
                                      spreadRadius: 1,
                                      blurRadius: 8,
                                      offset: const Offset(0, 3),
                                    ),
                                  ],
                                );
                              }
                            },
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        );
      }),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Obx(() {
          return ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color.fromARGB(255, 114, 94, 225),
              padding: const EdgeInsets.symmetric(vertical: 15),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(30.0),
              ),
            ),
            onPressed: () => Get.toNamed("/payment_page"),
            child: Text(
              'Lanjut ke Pembayaran (${transaksiController.totalBarang.value})',
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
            ),
          );
        }),
      ),
      backgroundColor: Colors.grey[100],
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:kasirsql/controllers/barang_controller/rupiah_input_formatter.dart';
import 'package:kasirsql/controllers/hutang_controller/hutang_controller.dart';
import 'package:kasirsql/controllers/switch_controller/switch_controller.dart';
import 'package:kasirsql/controllers/transaksi_controller/transaksi_controller.dart';

class PaymentPage extends StatelessWidget {
  PaymentPage({super.key});
  final TransaksiController transaksiController =
      Get.find<TransaksiController>();
  final TextEditingController uangDibayarController = TextEditingController();
  final TextEditingController namahutang = TextEditingController();
  final SwitchController switchController = Get.find<SwitchController>();
  final HutangController hutangController = Get.find<HutangController>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        title: const Text(
          "Pembayaran",
          style: TextStyle(color: Colors.white),
        ),
        centerTitle: true,
        backgroundColor: const Color.fromARGB(255, 114, 94, 225),
      ),
      body: SingleChildScrollView(
        scrollDirection: Axis.vertical,
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Obx(() {
              return Text(
                'Total Harga: ${transaksiController.formatRupiah(transaksiController.totalHarga.value)}',
                style: const TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              );
            }),
            const SizedBox(height: 16),
            TextFormField(
              controller: uangDibayarController,
              decoration: InputDecoration(
                prefixText: 'Rp ',
                labelText: 'Uang Dibayar',
                filled: true,
                fillColor: Colors.white,
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: const BorderSide(
                    color: Color.fromARGB(255, 114, 94, 225),
                  ),
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide(
                    color: Colors.grey.shade400,
                  ),
                ),
                contentPadding: const EdgeInsets.symmetric(
                  vertical: 16,
                  horizontal: 20,
                ),
              ),
              inputFormatters: [
                FilteringTextInputFormatter.digitsOnly,
                RupiahInputFormatter(),
              ],
              keyboardType: TextInputType.number,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Pembayaran tidak boleh kosong';
                }
                if (double.tryParse(value.replaceAll('.', '')) == null) {
                  return 'Pembayaran harus berupa angka';
                }
                return null;
              },
            ),
            const SizedBox(height: 20),
            Obx(
              () => Row(
                children: [
                  Switch(
                    value: switchController.isSwitched.value,
                    onChanged: switchController.toggleSwitch,
                  ),
                  const SizedBox(width: 5),
                  const Text("Hutang"),
                ],
              ),
            ),
            const SizedBox(height: 20),
            Obx(
              () {
                if (switchController.isSwitched.value) {
                  return TextFormField(
                    controller: namahutang,
                    decoration: InputDecoration(
                      labelText: 'Nama penghutang',
                      filled: true,
                      fillColor: Colors.white,
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: const BorderSide(
                          color: Color.fromARGB(255, 114, 94, 225),
                        ),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide(
                          color: Colors.grey.shade400,
                        ),
                      ),
                      contentPadding: const EdgeInsets.symmetric(
                        vertical: 16,
                        horizontal: 20,
                      ),
                    ),
                  );
                } else {
                  return Container();
                }
              },
            ),
            const SizedBox(height: 20),
            Obx(
              () {
                return Center(
                  child: ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color.fromARGB(255, 114, 94, 225),
                      minimumSize: const Size(double.infinity, 50),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                      padding: const EdgeInsets.symmetric(
                        vertical: 12,
                        horizontal: 20,
                      ),
                      textStyle: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    onPressed: () {
                      if (switchController.isSwitched.value) {
                        masukkanKeDaftar();
                      } else {
                        bayar();
                      }
                    },
                    child: Text(
                      switchController.isSwitched.value
                          ? 'Masukkan ke daftar'
                          : 'Bayar',
                      style: const TextStyle(color: Colors.white),
                    ),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  void bayar() {
    transaksiController.bayar.value =
        double.parse(uangDibayarController.text.replaceAll('.', ''));
    transaksiController.kembali.value =
        transaksiController.bayar.value - transaksiController.totalHarga.value;
    transaksiController.createTransaksi();
  }

  void masukkanKeDaftar() {
    // Fungsi
  }
}


import 'dart:io';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:kasirsql/controllers/bottom_bar_controller.dart';

class TransactionSuccessPage extends StatelessWidget {
  final File receiptFile;
  const TransactionSuccessPage({super.key, required this.receiptFile});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        title: const Text(
          "Transaksi Berhasil",
          style: TextStyle(color: Colors.white),
        ),
        centerTitle: true,
        backgroundColor: const Color.fromARGB(255, 114, 94, 225),
      ),
      body: SingleChildScrollView(
        scrollDirection: Axis.vertical,
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text(
                'Transaksi Berhasil Dilakukan!',
                style: TextStyle(fontSize: 20),
              ),
              const SizedBox(height: 16),
              receiptFile.existsSync()
                  ? Image.file(receiptFile)
                  : const Text('Receipt tidak ditemukan'),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  final BottomBarController bottomBarController = Get.find();
                  bottomBarController.resetToHome(); // Reset to Home page
                  Get.offAllNamed('/halaman_utama');
                },
                child: const Text('Halaman Utama'),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  Get.back();
                  Get.back();
                  Get.back();
                  Get.back();
                },
                child: const Text('Transaksi Kembali'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

Sekarang masih Jangan berikan kode terlebih dahulu, ingat baik-baik saja dengan kode yang saya berikan untuk memberikan arahan selanjutnya, saya akan memberikan kode lain, sekarang berikan penjelasan singkat saja.
Gunakan bahasa indonesia dalam percakapan kali ini.
Perhatikan kode saya dengan seksama dan diingat baik-baik.
class Transaksi {
  final int? id;
  final int totalBarang;
  final double totalHarga;
  final double totalHargaBeli;
  final double bayar;
  final double kembali;
  final int userId;
  final DateTime createdAt;
  final DateTime updatedAt;

  Transaksi({
    this.id,
    required this.totalBarang,
    required this.totalHarga,
    required this.totalHargaBeli,
    required this.bayar,
    required this.kembali,
    required this.userId,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'total_barang': totalBarang,
      'total_harga': totalHarga,
      'total_harga_beli': totalHargaBeli,
      'bayar': bayar,
      'kembali': kembali,
      'user_id': userId,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
    };
  }

  factory Transaksi.fromJson(Map<String, dynamic> json) {
    return Transaksi(
      id: json['id'] != null ? int.tryParse(json['id'].toString()) : null,
      totalBarang: int.parse(json['total_barang'].toString()),
      totalHarga: double.parse(json['total_harga'].toString()),
      totalHargaBeli: double.parse(json['total_harga_beli'].toString()),
      bayar: double.parse(json['bayar'].toString()),
      kembali: double.parse(json['kembali'].toString()),
      userId: int.parse(json['user_id'].toString()),
      createdAt: DateTime.parse(json['created_at']),
      updatedAt: DateTime.parse(json['updated_at']),
    );
  }
}


class DetailTransaksi {
  final int? id;
  final int transaksiId;
  final String namaBarang;
  final int jumlahBarang;
  final double hargaBarang;
  final double jumlahHarga;
  final DateTime createdAt;
  final DateTime updatedAt;

  DetailTransaksi({
    this.id,
    required this.transaksiId,
    required this.namaBarang,
    required this.jumlahBarang,
    required this.hargaBarang,
    required this.jumlahHarga,
    required this.createdAt,
    required this.updatedAt,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'transaksi_id': transaksiId,
      'nama_barang': namaBarang,
      'jumlah_barang': jumlahBarang,
      'harga_barang': hargaBarang,
      'jumlah_harga': jumlahHarga,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
    };
  }

  factory DetailTransaksi.fromJson(Map<String, dynamic> json) {
    return DetailTransaksi(
      id: json['id'] is String ? int.tryParse(json['id']) : json['id'],
      transaksiId: json['transaksi_id'] is String ? int.parse(json['transaksi_id']) : json['transaksi_id'],
      namaBarang: json['nama_barang'],
      jumlahBarang: json['jumlah_barang'] is String ? int.parse(json['jumlah_barang']) : json['jumlah_barang'],
      hargaBarang: json['harga_barang'] is String ? double.parse(json['harga_barang']) : json['harga_barang'],
      jumlahHarga: json['jumlah_harga'] is String ? double.parse(json['jumlah_harga']) : json['jumlah_harga'],
      createdAt: DateTime.parse(json['created_at']),
      updatedAt: DateTime.parse(json['updated_at']),
    );
  }
}


<?php
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "kasirsql";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

$action = isset($_GET['action']) ? $_GET['action'] : '';

if ($action == 'create_transaksi') {
    $data = json_decode(file_get_contents('php://input'), true);

    $total_barang = $data['total_barang'];
    $total_harga = $data['total_harga'];
    $total_harga_beli = $data['total_harga_beli'];
    $bayar = $data['bayar'];
    $kembali = $data['kembali'];
    $user_id = $data['user_id'];
    $created_at = $data['created_at'];
    $updated_at = $data['updated_at'];

    $query = "INSERT INTO transaksi (total_barang, total_harga, total_harga_beli, bayar, kembali, user_id, created_at, updated_at) VALUES ('$total_barang', '$total_harga', '$total_harga_beli', '$bayar', '$kembali', '$user_id', '$created_at', '$updated_at')";

    if ($conn->query($query) === TRUE) {
        $transaksi_id = $conn->insert_id;
        echo json_encode(['status' => 'success', 'transaksi_id' => $transaksi_id]);
    } else {
        echo json_encode(['status' => 'error', 'message' => $conn->error]);
    }
} elseif ($action == 'create_detail_transaksi') {
    $data = json_decode(file_get_contents('php://input'), true);

    $transaksi_id = $data['transaksi_id'];
    $nama_barang = $data['nama_barang'];
    $jumlah_barang = $data['jumlah_barang'];
    $harga_barang = $data['harga_barang'];
    $jumlah_harga = $data['jumlah_harga'];
    $created_at = $data['created_at'];
    $updated_at = $data['updated_at'];

    $query = "INSERT INTO detail_transaksi (transaksi_id, nama_barang, jumlah_barang, harga_barang, jumlah_harga, created_at, updated_at) VALUES ('$transaksi_id', '$nama_barang', '$jumlah_barang', '$harga_barang', '$jumlah_harga', '$created_at', '$updated_at')";

    if ($conn->query($query) === TRUE) {
        // Kurangi stok barang di tabel barang
        $update_stok_query = "UPDATE barang SET stok_barang = stok_barang - $jumlah_barang WHERE nama_barang = '$nama_barang'";
        if ($conn->query($update_stok_query) !== TRUE) {
            echo json_encode(['status' => 'error', 'message' => 'Failed to update stock: ' . $conn->error]);
        } else {
            echo json_encode(['status' => 'success']);
        }
    } else {
        echo json_encode(['status' => 'error', 'message' => $conn->error]);
    }
} elseif ($action == 'upload_struk') {
    if (isset($_FILES['struk']) && isset($_POST['transaksi_id'])) {
        $transaksi_id = $_POST['transaksi_id'];
        $target_dir = "C:/xampp/htdocs/flutterapi/struk/";
        $file_name = basename($_FILES["struk"]["name"]);
        $target_file = $target_dir . $file_name;

        if (move_uploaded_file($_FILES["struk"]["tmp_name"], $target_file)) {
            $query = "UPDATE transaksi SET struk='$file_name' WHERE id='$transaksi_id'";
            if ($conn->query($query) === TRUE) {
                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode(['status' => 'error', 'message' => $conn->error]);
            }
        } else {
            echo json_encode(['status' => 'error', 'message' => 'Failed to upload file']);
        }
    } else {
        echo json_encode(['status' => 'error', 'message' => 'Invalid request']);
    }
} else {
    echo json_encode(['status' => 'error', 'message' => 'Invalid action']);
}

$conn->close();

import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:kasirsql/controllers/transaksi_controller/generate_receipt_controller.dart';
import 'package:kasirsql/controllers/user_controller/user_controller.dart';
import 'package:kasirsql/models/transaksi_model.dart';
import 'package:kasirsql/models/barang_model.dart';
import 'package:kasirsql/models/detail_transaksi_model.dart';
import 'package:kasirsql/views/transaksi/transaction_success_page.dart';
import 'package:path_provider/path_provider.dart';

class TransaksiController extends GetxController {
  var isLoading = false.obs;
  var selectedBarangList = <Map<String, dynamic>>[].obs;
  var totalHarga = 0.0.obs;
  var totalHargaBeli = 0.0.obs;
  var totalBarang = 0.obs;
  var bayar = 0.0.obs;
  var kembali = 0.0.obs;
  final String apiUrl = 'http://10.10.10.129/flutterapi/api_transaksi.php';
  final UserController userController = Get.find<UserController>();

  void addBarangToCart(Barang barang) {
    var existingBarangIndex =
        selectedBarangList.indexWhere((element) => element['id'] == barang.id);

    if (existingBarangIndex == -1) {
      if (barang.stokBarang > 0) {
        selectedBarangList.add({
          'id': barang.id,
          'gambar': barang.gambar,
          'nama_barang': barang.namaBarang,
          'harga_barang': barang.hargaJual,
          'jumlah_barang': 1,
          'jumlah_harga': barang.hargaJual,
          'kode_barang': barang.kodeBarang,
          'stok_barang': barang.stokBarang,
          'kategori_id': barang.kategoriId,
          'nama_kategori': barang.namaKategori,
          'harga_beli': barang.hargaBeli,
        });
        totalHarga.value += barang.hargaJual;
        totalHargaBeli.value += barang.hargaBeli;
        _updateTotalBarang();
        selectedBarangList.refresh();
      } else {
        Get.snackbar(
          'Stok Tidak Cukup',
          'Tidak bisa melebihi stok barang.',
          backgroundColor: const Color.fromARGB(255, 235, 218, 63),
          colorText: Colors.black,
          borderRadius: 10,
          margin: const EdgeInsets.all(10),
          snackPosition: SnackPosition.TOP,
          icon: const Icon(Icons.error, color: Colors.black),
          duration: const Duration(seconds: 3),
          snackStyle: SnackStyle.FLOATING,
          boxShadows: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              spreadRadius: 1,
              blurRadius: 8,
              offset: const Offset(0, 3),
            ),
          ],
        );
      }
    } else {
      var existingBarang = selectedBarangList[existingBarangIndex];
      if (existingBarang['jumlah_barang'] < barang.stokBarang) {
        existingBarang['jumlah_barang'] += 1;
        existingBarang['jumlah_harga'] =
            existingBarang['jumlah_barang'] * existingBarang['harga_barang'];
        selectedBarangList[existingBarangIndex] = existingBarang;

        totalHarga.value += barang.hargaJual;
        totalHargaBeli.value += barang.hargaBeli;
        _updateTotalBarang();
        selectedBarangList.refresh();
      } else {
        Get.snackbar(
          'Stok Tidak Cukup',
          'Tidak bisa melebihi stok barang.',
          backgroundColor: const Color.fromARGB(255, 235, 218, 63),
          colorText: Colors.black,
          borderRadius: 10,
          margin: const EdgeInsets.all(10),
          snackPosition: SnackPosition.TOP,
          icon: const Icon(Icons.error, color: Colors.black),
          duration: const Duration(seconds: 3),
          snackStyle: SnackStyle.FLOATING,
          boxShadows: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              spreadRadius: 1,
              blurRadius: 8,
              offset: const Offset(0, 3),
            ),
          ],
        );
      }
    }

    print('Total Barang: ${totalBarang.value}');
  }

  void removeBarangFromCart(Barang barang) {
    var detailBarang =
        selectedBarangList.firstWhere((element) => element['id'] == barang.id);
    selectedBarangList.remove(detailBarang);
    totalHarga.value -= barang.hargaJual;
    totalHargaBeli.value -= barang.hargaBeli;
    _updateTotalBarang();
    selectedBarangList.refresh();
    print('Total Barang: ${totalBarang.value}');
  }

  void updateBarangQuantity(Barang barang, int quantity) {
    var detailBarang =
        selectedBarangList.firstWhere((element) => element['id'] == barang.id);

    if (quantity > barang.stokBarang) {
      Get.snackbar(
        'Stok Tidak Cukup',
        'Tidak bisa melebihi stok barang.',
        backgroundColor: const Color.fromARGB(255, 235, 218, 63),
        colorText: Colors.black,
        borderRadius: 10,
        margin: const EdgeInsets.all(10),
        snackPosition: SnackPosition.TOP,
        icon: const Icon(Icons.error, color: Colors.black),
        duration: const Duration(seconds: 3),
        snackStyle: SnackStyle.FLOATING,
        boxShadows: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            spreadRadius: 1,
            blurRadius: 8,
            offset: const Offset(0, 3),
          ),
        ],
      );
      return;
    }

    totalHarga.value -=
        detailBarang['harga_barang'] * detailBarang['jumlah_barang'];
    totalHargaBeli.value -=
        detailBarang['harga_beli'] * detailBarang['jumlah_barang'];
    detailBarang['jumlah_barang'] = quantity;
    detailBarang['jumlah_harga'] =
        detailBarang['harga_barang'] * detailBarang['jumlah_barang'];
    totalHarga.value +=
        detailBarang['harga_barang'] * detailBarang['jumlah_barang'];
    totalHargaBeli.value +=
        detailBarang['harga_beli'] * detailBarang['jumlah_barang'];
    _updateTotalBarang();
    selectedBarangList.refresh();
    print('Total Barang: ${totalBarang.value}');
  }

  void _updateTotalBarang() {
    totalBarang.value = selectedBarangList.fold<int>(
        0, (sum, item) => sum + item['jumlah_barang'] as int);
  }

    Future<void> createTransaksi() async {
    var now = DateTime.now();
    var userId = userController.currentUser.value?.id;

    if (userId == null) {
      Get.snackbar('Error', 'User tidak ditemukan. Silakan login kembali.');
      return;
    }

    var transaksi = Transaksi(
      totalBarang: totalBarang.value,
      totalHarga: totalHarga.value,
      totalHargaBeli: totalHargaBeli.value,
      bayar: bayar.value,
      kembali: bayar.value - totalHarga.value,
      userId: userId,
      createdAt: now,
      updatedAt: now,
    );

    print(jsonEncode(transaksi.toJson()));

    try {
      isLoading.value = true; // Set loading to true
      Get.defaultDialog(
        title: 'Loading...',
        content: const Column(
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text('Proses transaksi sedang berlangsung'),
          ],
        ),
        barrierDismissible: false,
      );
      var response = await http.post(
        Uri.parse('$apiUrl?action=create_transaksi'),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode(transaksi.toJson()),
      );
      print('Response status: ${response.statusCode}');
      print('Response body: ${response.body}');
      if (response.statusCode == 200) {
        var result = json.decode(response.body);
        if (result['status'] == 'success') {
          Get.snackbar('Success', 'Transaksi berhasil dilakukan');
          print('RESPON: ${response.body}');

          var transaksiId = result['transaksi_id'];
          if (transaksiId != null) {
            // Mengirim detail transaksi ke server
            await _saveDetailTransaksi(transaksiId);

            // Fetch the saved detail transaksi
            List<DetailTransaksi> detailTransaksiList =
                selectedBarangList.map((barang) {
              return DetailTransaksi(
                transaksiId: transaksiId,
                namaBarang: barang['nama_barang'],
                jumlahBarang: barang['jumlah_barang'],
                hargaBarang: barang['harga_barang'],
                jumlahHarga: barang['jumlah_harga'],
                createdAt: now,
                updatedAt: now,
              );
            }).toList();

            await Get.find<GenerateReceiptController>()
                .generateReceipt(transaksi, detailTransaksiList, transaksiId);

            File receiptFile = File(
                '${(await getApplicationDocumentsDirectory()).path}/receipt_$transaksiId.png');

            var uri = Uri.parse('$apiUrl?action=upload_struk');
            var request = http.MultipartRequest('POST', uri)
              ..fields['transaksi_id'] = transaksiId.toString()
              ..files.add(
                  await http.MultipartFile.fromPath('struk', receiptFile.path));

            var uploadResponse = await request.send();
            if (uploadResponse.statusCode == 200) {
              var responseData = await uploadResponse.stream.bytesToString();
              var uploadResult = json.decode(responseData);
              if (uploadResult['status'] == 'success') {
                Get.to(() => TransactionSuccessPage(receiptFile: receiptFile));
              } else {
                Get.snackbar('Error',
                    'Gagal mengunggah struk: ${uploadResult['message']}');
              }
            } else {
              Get.snackbar('Error', 'Gagal mengunggah struk');
            }
          } else {
            Get.snackbar('Error', 'Transaksi ID tidak ditemukan.');
          }
        } else {
          Get.snackbar('Error', 'Transaksi gagal: ${result['message']}');
        }
      } else {
        Get.defaultDialog(
          title: 'Gagal',
          content: SingleChildScrollView(
            child: Text(response.body),
          ),
          textConfirm: 'Okay',
          onConfirm: () => Get.back(),
        );
      }
    } catch (e) {
      Get.defaultDialog(
        title: 'Error',
        content: SingleChildScrollView(
          child: Text('$e'),
        ),
        textConfirm: 'Okay',
        onConfirm: () => Get.back(),
      );
    } finally {
      isLoading.value = false; // Set loading to false
      Get.back(); // Close loading dialog
    }
  }

  Future<void> _saveDetailTransaksi(int transaksiId) async {
    for (var barang in selectedBarangList) {
      var detailTransaksi = DetailTransaksi(
        transaksiId: transaksiId,
        namaBarang: barang['nama_barang'],
        jumlahBarang: barang['jumlah_barang'],
        hargaBarang: barang['harga_barang'],
        jumlahHarga: barang['jumlah_harga'],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      try {
        var response = await http.post(
          Uri.parse('$apiUrl?action=create_detail_transaksi'),
          headers: {"Content-Type": "application/json"},
          body: jsonEncode(detailTransaksi.toJson()),
        );

        if (response.statusCode != 200) {
          throw Exception('Failed to save detail transaksi');
        }

        // Menyampaikan informasi ke server untuk mengurangi stok barang
        var updateStockResponse = await http.post(
          Uri.parse('$apiUrl?action=update_stok_barang'),
          headers: {"Content-Type": "application/json"},
          body: jsonEncode({
            'id': barang['id'],
            'jumlah_barang': barang['jumlah_barang'],
          }),
        );

        if (updateStockResponse.statusCode != 200) {
          throw Exception('Failed to update stock');
        }
      } catch (e) {
        Get.snackbar('Error', 'Gagal menyimpan detail transaksi: $e');
      }
    }
  }


  String formatRupiah(double amount) {
    return amount
        .toStringAsFixed(0)
        .replaceAllMapped(RegExp(r'\B(?=(\d{3})+(?!\d))'), (match) => '.');
  }

  void resetCart() {
    selectedBarangList.clear();
    totalHarga.value = 0.0;
    totalBarang.value = 0;
    bayar.value = 0.0;
    kembali.value = 0.0;
  }
}

Jangan berikan kode terlebih dahulu, ingat baik-baik saja dengan kode yang saya berikan untuk memberikan arahan selanjutnya, saya akan memberikan kode lain, sekarang berikan penjelasan singkat saja.